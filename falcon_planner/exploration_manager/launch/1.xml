<launch>
  <arg name="mode" value="uav_simulator"/>
  <arg name="map_name" default="complex_office"/>

  <arg name="odometry_topic" value="/uav_simulator/odometry"/>
  <arg name="sensor_pose_topic" value="/uav_simulator/sensor_pose"/>
  <arg name="depth_image" value="/uav_simulator/depth_image"/>
  <arg name="drone_id" default="1"/>
  <arg name="init_x"   default="0"/>
  <arg name="init_y"   default="0"/>
  <!-- Load parameter for modules -->
  <rosparam command="load" file="$(find exploration_manager)/config/robot/uav_model_simulator.yaml"/>
  <!-- <rosparam command="load" file="$(find exploration_manager)/config/map/$(arg map_name).yaml"/> -->
  <rosparam command="load" file="$(find voxel_mapping)/config/voxel_mapping.yaml"/>
  <rosparam command="load" file="$(find pathfinding)/config/astar.yaml"/>
  <rosparam command="load" file="$(find fast_planner)/config/fast_planner.yaml"/>
  <rosparam command="load" file="$(find exploration_preprocessing)/config/frontier_finder.yaml"/>
  <rosparam command="load" file="$(find exploration_preprocessing)/config/hgrid.yaml"/>
  <rosparam command="load" file="$(find exploration_utils)/config/perception_utils.yaml"/>
  <rosparam command="load" file="$(find exploration_manager)/config/exploration_manager.yaml"/>

  <!-- Launch exploration node -->
  <node pkg="exploration_manager" name="exploration_node_$(arg drone_id)" type="exploration_node" output="log">
    <param name="exploration_manager/drone_id" value="$(arg drone_id)" type="int"/>
    <remap from ="/odom_world" to="$(arg odometry_topic)_$(arg drone_id)"/>
    <remap from ="/voxel_mapping/depth_image" to = "$(arg depth_image)_$(arg drone_id)"/>
    <remap from ="/transformer/sensor_pose_topic"   to = "$(arg sensor_pose_topic)_$(arg drone_id)"/>
    <remap from ="/planning/bspline" to = "/planning/bspline_$(arg drone_id)"/>
    <remap from ="/planning/replan" to = "/planning/replan_$(arg drone_id)"/>
    <remap from ="/voxel_mapping/occupancy_grid_occupied" to = "//voxel_mapping/occupancy_grid_occupied_$(arg drone_id)"/>
    <remap from="/swarm_expl/drone_state_send" to="/swarm_expl/drone_state" />
    <remap from="/swarm_expl/drone_state_recv" to="/swarm_expl/drone_state" />
    <remap from="/swarm_expl/pair_opt_send" to="/swarm_expl/pair_opt" />
    <remap from="/swarm_expl/pair_opt_recv" to="/swarm_expl/pair_opt" />
    <remap from="/swarm_expl/pair_opt_res_send" to="/swarm_expl/pair_opt_res" />
    <remap from="/swarm_expl/pair_opt_res_recv" to="/swarm_expl/pair_opt_res" />
    <param name="exploration/mtsp_dir" value="$(find lkh_mtsp_solver)/resource" type="string"/>
  </node>

  <!-- Launch trajectory server -->
  <node pkg="fast_planner" name="traj_server_$(arg drone_id)" type="traj_server" output="log" >
    <param name="exploration_manager/drone_id" value="$(arg drone_id)" type="int"/>
    <remap from="/planning/pos_cmd" to="/planning/pos_cmd_$(arg drone_id)"/>
    <remap from ="/planning/bspline" to = "/planning/bspline_$(arg drone_id)"/>
    <remap from ="/planning/replan" to = "/planning/replan_$(arg drone_id)"/>
    <remap from ="/planning/position_cmd_vis" to = "/planning/position_cmd_vis_$(arg drone_id)"/>
    <remap from ="/planning/travel_traj" to = "/planning/travel_traj_$(arg drone_id)"/>
  </node>

  <!-- Launch UAV Simulator if needed -->
  <group if="$(eval 'true' if arg('mode')=='uav_simulator' else 'false')">
    <!-- Map Render -->
    <rosparam command="load" file="$(find pointcloud_render)/config/pointcloud_render.yaml"/>
    <rosparam command="load" file="$(find mesh_render)/config/mesh_render.yaml"/>

    <!-- Odometry Generator -->
    <node pkg="poscmd_2_odom" name="poscmd_2_odom_$(arg drone_id)" type="poscmd_2_odom" output="log">
      <param name="init_x"     value="$(arg init_x)"/>
      <param name="init_y"     value="$(arg init_y)"/>
      <remap from="~command" to="/planning/pos_cmd_$(arg drone_id)"/>
      <remap from="~odometry" to="$(arg odometry_topic)_$(arg drone_id)"/>
    </node>

    <!-- Robot Visualier -->
    <node pkg="odom_visualization" name="odom_visualization_$(arg drone_id)" type="odom_visualization" output="screen">
      <remap from="~odometry" to="$(arg odometry_topic)"/>
    </node>
  </group>


  <node pkg="lkh_mtsp_solver" name="acvrp_solver_$(arg drone_id)" type="mtsp_node" output="log">
    <param name="exploration/drone_id" value="$(arg drone_id)" type="int"/>
    <param name="exploration/mtsp_dir" value="$(find lkh_mtsp_solver)/resource" type="string"/>
    <param name="exploration/problem_id" value="2" type="int"/>
  </node>
    <node pkg="lkh_mtsp_solver" name="tsp_solver_$(arg drone_id)" type="mtsp_node" output="log">
    <param name="exploration/drone_id" value="$(arg drone_id)" type="int"/>
    <param name="exploration/mtsp_dir" value="$(find lkh_mtsp_solver)/resource" type="string"/>
    <param name="exploration/problem_id" value="1" type="int"/>
  </node>
</launch>
